{% extends "base.jinja-html" %}
{% import 'icons.jinja' as icon %}
{% import 'components.jinja' as component %}

{% block content %}
  <div class="h-full bg-zinc-950">
    <div x-data='{{ status | tojson | safe }}'>
      {% set hxTargetSwap = "hx-target=#satt hx-swap=innerHTML" %}

      <!-- Header -->
      <div class="grid grid-cols-3">
        <div class="panel col-span-2 gap-2">
          <div class="flex justify-between">
            {{ icon.bulb() }}
            <span class="me-3 flex items-center text-sm font-medium text-white">
              <span class="me-1.5 flex h-2.5 w-2.5 shrink-0 rounded-full bg-teal-500"></span>
              ONLINE
            </span>
          </div>

          <select name="bulb-id" id="bulbSelect">
            {% for bulb in bulbs %}
              <option class="text-black" value="{{ bulb.id }}">{{ bulb.name }}</option>
            {% endfor %}
          </select>
        </div>

        <div class="panel flex items-center justify-center">
          <!-- Button Toggle ON/OFF -->
          <button name="toggle"
                  class="flex h-full w-full items-center justify-center rounded-lg hover:bg-stone-800"
                  id="toggle"
                  hx-post="/toggle"
                  hx-trigger="click"
                  hx-include="#bulbSelect"
                  {{ hxTargetSwap }}>
            {{ icon.power() }}
          </button>
        </div>
      </div>

      <!-- Body -->
      <div x-data="{ selectedAccordionItem: 'One' }" class="flex w-full flex-col gap-2 p-2">
        <!-- TEMPERATURE -->
        {% call component.accordion(icon.temperature(), "Temperature", 'One') %}
          <form hx-post="/temp"
                hx-trigger="change"
                hx-include="#bulbSelect"
                {{ hxTargetSwap }}
                class="flex flex-col gap-2">
            {{ component.slider(id='temp', name='temperature', min=2200, max=6200, icon=icon.temperature() ,
            value=status.result.temp) }}
            {{ component.slider(id='bright', name='brightness', icon=icon.brightness() , value=status.result.dimming) }}
          </form>
        {% endcall %}

        <!-- SCENE -->
        {% call component.accordion(icon.scene(), "Scene", 'Two') %}
          <form hx-post="/scene"
                hx-trigger="change"
                hx-include="#bulbSelect"
                {{ hxTargetSwap }}
                class="flex flex-col gap-2"
                x-data='{ type: null }'>
            <select name="scene-id"
                    id="scene"
                    x-model="result.sceneId"
                    @change='type = $event.target.selectedOptions[0].dataset.type'>
              {% for scene in scenes %}
                <option value="{{ scene.id }}" data-type="{{ scene.type }}" class="text-black">
                  {{ scene.name }}
                </option>
              {% endfor %}
            </select>

            <div x-show="type === 'dynamic'">
              {{ component.slider(id='speed', name='speed', icon=icon.speed() , value=status.result.speed) }}
            </div>
            {{ component.slider(id='bright', name='brightness', icon=icon.brightness() , value=status.result.dimming) }}
          </form>
        {% endcall %}

        <!-- RGB -->
        {% call component.accordion(icon.rgb(), "RGB", 'Three') %}
          <form hx-post="/rbg" class="flex flex-col gap-2">
            <input type="color" name="color" id="color" class="w-full h-10 rounded-lg border-2" value="#00b8db" />
            {{ component.slider(id='bright', name='brightness', icon=icon.brightness() , value=status.result.dimming) }}
          </form>
        {% endcall %}

        {% call component.accordion(icon.status(), "Status", 'Four') %}
          <span id="satt">{{ status }}</span>
        {% endcall %}
      </div>
    </div>

    <script src="{{ url_for('static', filename='service-worker.js') }}"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <script>
        function sliderBox(id, name, min, max, initial) {
            return {
                val: initial,
                min,
                max,
                name,
                get percent() {
                    // special case for temperature â†’ remap range
                    if (name === 'temperature' || id.startsWith('temp')) {
                        return ((this.val - 2200) * (100 - 0)) / (6200 - 2200) + 0;
                    }
                    // otherwise normal percentage
                    return this.val;
                },
            };
        }
    </script>
  </div>
{% endblock %}
